import numpy as np
import matplotlib.pyplot as plt
# from scipy.misc import imread

'''array1=np.array([1,2,3,4,5])
print(array1,type(array1))
print(array1.shape)
print(array1[0])
array1[0]=10
print(array1)
print('----------------------------------------------')

b=np.array([[1,2,3],[4,5,6]])    # 二位数组
print(b,type(b))
print(b.shape)                  # 输出为（2，3）--指二行三列
print(b[0,0],b[1,0],b[0,1])     # b[x,y]指第x-1行，第y-1列
print('------------------------------------------------')


a=np.zeros((2,2))  # 只能为两个括号
print(a,type(a))
print(a[0,0])
print(a[0,1])  # 二行二列的数值都为0的二位数组

b=np.ones((1,2))
print(b)      # 一行二列的数值都为1的一维数组

c=np.full((2,2),7) # np.full((a,b),c)--a行b列且数值都为c的数组
print(c)

d=np.eye(2)     # np.eye(x)--创建一个x行x列的单位矩阵
print(d)

e=np.random.random((2,2))  # np.random.random((x,y))创建一个x行y列的随机矩阵
print(e)
print('-----------------------------------------------------')

# 注：数组的维度与数组的行数与列数无关，而要看其[]的数量即其数组的层数
a1=np.array([[1,2,3,4],[5,6,7,8],[9,10,11,12]])  # 三行四列的三维数组
print(a1)
# 切片操作
b1=a1[0:1,0:3]  # X[s0:e0,s1:e1]表示表示取第0维的第s0到e0个元素，继续取第1维的第s1到e1 个元素（左闭右开）
print(b1)
print('-------------------------------------------------------')

a1=np.array([[1,2,3,4],[5,6,7,8],[9,10,11,12]])
row_1=a1[1, : ]   # 把二维数组的索引为1的这个元素切片出来，所得为一个一维数组（切的是第二维的数组)--切出的所有元素组成一个一维数组
print(row_1,type(row_1),row_1.shape)
row_2=a1[1:2,:]  # 切的是第一维的数组，所得为一个二维数组
print(row_2,type(row_2),row_2.shape)


col_r1 = a1[:, 1]
print(col_r1,col_r1.shape)   # 切出的所有元素组成一个一维数组
col_r2 = a1[:,1:2]
print(col_r2,col_r2.shape)    # 所得为二维数组
print('-------------------------------------------------------')

a3 = np.array([[1, 2], [3, 4], [5, 6]])
b3 = a3[[0, 1, 2], [0, 1, 0]]  # 二维数组中第零个数组的第0个元素，第一数组的第一个元素，第二个数组的第0个元素
print(b3)
print(a[[0, 0], [1, 1]])       # 分别输出第零个数组的第一个元素（看清楚其中[]的分布）
print(a[0, 1], a[0, 1])
print('----------------------------------------------------')

a4 = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9], [10, 11, 12]])
print(a)
b4 = np.array([0, 2, 0, 1])  # 创建一个新的数组
# np.arange(x,y,z)函数,第一个为起点，第二个为终点，第三个为步长。步长可以用小数。若起点终点不写，则默认为0；步长不写，则默认为1
print(a4[np.arange(4), b4])     # 取一维数组的量取决于arange函数，取一维数组中元素的位置取决于b这个数组
a4[np.arange(4), b4] += 10
print(a4)
print('----------------------------------------------')

a5 = np.array([[1, 2], [3, 4], [5, 6]])
bool_idx = (a5 > 2)    # 给出bool判定条件，需要a中的元素大于2
print(bool_idx)
print(a5[bool_idx])   # 打印出a5中数值大于2的元素并组成一个一维数组
print(a5[a5 > 2])
print('-----------------------------------------------------')

x = np.array([1, 2])
print(x.dtype)
y = np.array([1.0, 2.0])
print(y.dtype)
z = np.array([1.0, 2.0], dtype=np.int64)
print(z)
print('-----------------------------------------------------')

x = np.array([[1, 2], [3, 4]], dtype=np.float64)
y = np.array([[5, 6], [7, 8]], dtype=np.float64)
print(y-x)
print(np.add(x, y))

print(x*y)                 # ”*“符号代表逐个相除
print(np.subtract(x, y))
print(np.multiply(x, y))
print(np.divide(x, y))  # 除法
print('-------------------')
print(np.sqrt(x, y))    # 求平方根

# $$$:dot表示矩阵乘法
x = np.array([[1, 2], [3, 4]], dtype=np.int64)
y = np.array([[5, 6], [7, 8]], dtype=np.int64)

v = np.array([9, 10])
w = np.array([11, 12])
print(v.dot(w))
print(np.dot(v, w))

print(x.dot(w))
print(np.dot(x,w))

print(x.dot(y))
print('----------------------------------------------')

x = np.array([[1, 2], [3, 4]], dtype=np.int64)
print(np.sum(x))    # 表示二维数组中所有元素的和
print(np.sum(x, axis=0))   # a[0][j],a[1][j]对应项相加的结果，即[1,2]+[3,4]=[4,6]
print(np.sum(x, axis=1))   # a[i][0],a[i][1]对应项相加的结果，即[1,3]+[2,4]=[3,7]
print('----------------------------------------')

x = np.array([[1, 2], [3, 4]], dtype=np.int64)
print(x)
x1 = x.T
print(x1)            # "T"表示矩阵的转置(行变列，列变行)

v = np.array([1, 2, 3])
print(v)
print(v.T)
print('----------------------------------')

# 把v加到x矩阵的每一行
x = np.array([[1, 2, 3], [2, 3, 4], [4, 5, 6], [7, 8, 9]])
v = np.array([1, 0, 1])
y = np.empty_like(x)   # 创建一个跟x格式相同的零矩阵
print(y)
for i in range(4):
    y[i, :] = x[i, :]+v
print(x)
print(y)
print('-------------------------------------------------')

x = np.array([[1, 2, 3], [2, 3, 4], [4, 5, 6], [7, 8, 9]])
v = np.array([1, 0, 1])
vv = np.tile(v, (4, 1))  # 复制四列v，且每个v都只复制一次
print(vv)
y = x+vv       # 直接把v扩充成和x行数列数相同的矩阵，再进行相加
print(y)
print('-------------------------------------------------')

x = np.array([[1, 2, 3], [2, 3, 4], [4, 5, 6], [7, 8, 9]])
v = np.array([1, 0, 1])
y = x+v
print(y)       # 利用numpy的broadcasting机制可以不用扩充v，直接进行相加
print('-------------------------------------------------')'''

# 利用matplotlib画图
'''x = np.arange(0, 3*np.pi, 0.1)  # pi代表3.11415967的那个pai
y_sin = np.sin(x)
y_cos = np.cos(x)

plt.plot(x, y_sin)
plt.plot(x, y_cos)
plt.xlabel('x axis label')
plt.ylabel('y axis label')
plt.title('sin function and cos function')
plt.legend(['sin(x)', 'cos(x)'])      # 显示出图像的标签
plt.show()'''

'''# 画多个图像:subplot（numbRow ， numbCol ，plotNum ）--　numbRow是plot图的行数；numbCol是plot图的列数；plotNum是指第几行第几列的第几幅图
# 区分subplot于subplots,前者是两个图形在一个界面上，后者是两个图像分别在两个不同的界面上
x = np.arange(0, 3*np.pi, 0.1)  # pi代表3.11415967的那个pai
y_sin = np.sin(x)
y_cos = np.cos(x)
plt.subplot(2, 1, 1)
plt.plot(x, y_sin)
plt.title('sin(x)')

plt.subplot(2, 1, 2)
plt.plot(x, y_cos)
plt.title("cos(x)")
plt.show()'''








